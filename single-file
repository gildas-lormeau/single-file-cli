#!/usr/bin/env node

/*
 * Copyright 2010-2020 Gildas Lormeau
 * contact : gildas.lormeau <at> gmail.com
 *
 * This file is part of SingleFile.
 *
 *   The code in this file is free software: you can redistribute it and/or
 *   modify it under the terms of the GNU Affero General Public License
 *   (GNU AGPL) as published by the Free Software Foundation, either version 3
 *   of the License, or (at your option) any later version.
 *
 *   The code in this file is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 *   General Public License for more details.
 *
 *   As additional permission under GNU AGPL version 3 section 7, you may
 *   distribute UNMODIFIED VERSIONS OF THIS file without the copy of the GNU
 *   AGPL normally required by section 4, provided you include this license
 *   notice and a URL through which recipients can access the Corresponding
 *   Source.
 */

/* global require */

const fileUrl = require("file-url");
const fs = require("fs");
const api = require("./single-file-cli-api");
run(require("./args"))
	.catch(error => console.error(error.message || error)); // eslint-disable-line no-console	

async function run(options) {
	let urls;
	if (options.url && !api.VALID_URL_TEST.test(options.url)) {
		options.url = fileUrl(options.url);
	}
	if (options.urlsFile) {
		urls = fs.readFileSync(options.urlsFile).toString().split(/\r?\n/);
	} else {
		urls = [options.url];
	}
	if (options.browserCookiesFile) {
		const cookiesContent = fs.readFileSync(options.browserCookiesFile).toString();
		try {
			options.browserCookies = JSON.parse(cookiesContent);
		} catch (error) {
			options.browserCookies = parseCookies(cookiesContent);
		}
	}
	options.retrieveLinks = true;
	const singlefile = await api.initialize(options);
	await singlefile.capture(urls);
	await singlefile.finish();
}

function parseCookies(textValue) {
	const httpOnlyRegExp = /^#HttpOnly_(.*)/;
	return textValue.split(/\r?\n/)
		.filter(line => line.trim() && (!/^#/.test(line) || httpOnlyRegExp.test(line)))
		.map(line => {
			const httpOnly = httpOnlyRegExp.test(line);
			if (httpOnly) {
				line = line.replace(httpOnlyRegExp, "$1");
			}
			const values = line.split(/\t/);
			if (values.length == 7) {
				return {
					domain: values[0],
					path: values[2],
					secure: values[3] == "TRUE",
					expires: (values[4] && Number(values[4])) || undefined,
					name: values[5],
					value: values[6],
					httpOnly
				};
			}
		})
		.filter(cookieData => cookieData);
}
